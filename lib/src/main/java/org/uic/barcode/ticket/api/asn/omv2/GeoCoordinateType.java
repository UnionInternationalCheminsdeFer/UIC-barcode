/*
 *   This file was generated by openASN.1 - an open source ASN.1 toolkit for java
 *
 *   openASN.1 is Copyright (C) 2007 Clayton Hoss, Marc Weyland
 *
 *   openASN.1 is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as
 *   published by the Free Software Foundation, either version 3 of
 *   the License, or (at your option) any later version.
 *
 *   openASN.1 is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with openASN.1. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package org.uic.barcode.ticket.api.asn.omv2;

import org.uic.barcode.asn1.datatypes.Asn1BigInteger;
import org.uic.barcode.asn1.datatypes.Asn1Default;
import org.uic.barcode.asn1.datatypes.Asn1Optional;
import org.uic.barcode.asn1.datatypes.FieldOrder;
import org.uic.barcode.asn1.datatypes.Sequence;

@Sequence
public class GeoCoordinateType extends Object {
	public GeoCoordinateType() {
	}

	@FieldOrder(order = 0)
	@Asn1Default(value="milliDegree")
	@Asn1Optional public GeoUnitType geoUnit;

	@FieldOrder(order = 1)
	@Asn1Default(value="wgs84")
	@Asn1Optional public GeoCoordinateSystemType coordinateSystem;

	@FieldOrder(order = 2)
	@Asn1Default(value="north")
	@Asn1Optional public HemisphereLongitudeType hemisphereLongitude;

	@FieldOrder(order = 3)
	@Asn1Default(value="east")
	@Asn1Optional public HemisphereLatitudeType hemisphereLatitude;

	@FieldOrder(order = 4)
	public Asn1BigInteger longitude;

	@FieldOrder(order = 5)
	public Asn1BigInteger latitude;

	@FieldOrder(order = 6)
	@Asn1Optional public GeoUnitType accuracy;

	public GeoUnitType getGeoUnit() {

		if (geoUnit == null){
			return GeoUnitType.milliDegree;
		}
		return this.geoUnit;
	}

	public GeoCoordinateSystemType getCoordinateSystem() {

		if (coordinateSystem == null) {
			return GeoCoordinateSystemType.wgs84;
		}
		
		return this.coordinateSystem;
	}

	public HemisphereLongitudeType getHemisphereLongitude() {

		if (hemisphereLongitude == null){
			return HemisphereLongitudeType.north;
		}
		
		return this.hemisphereLongitude;
	}

	public HemisphereLatitudeType getHemisphereLatitude() {

		if (hemisphereLatitude == null) {
			return HemisphereLatitudeType.east;
		}
		
		return this.hemisphereLatitude;
	}

	public Long getLongitude() {

		return Asn1BigInteger.toLong(this.longitude);
	}

	public Long getLatitude() {

		return Asn1BigInteger.toLong(this.latitude);
	}

	public GeoUnitType getAccuracy() {

		return this.accuracy;
	}

	public void setGeoUnit(GeoUnitType geoUnit) {

		this.geoUnit = geoUnit;
	}

	public void setCoordinateSystem(GeoCoordinateSystemType coordinateSystem) {

		this.coordinateSystem = coordinateSystem;
	}

	public void setHemisphereLongitude(HemisphereLongitudeType hemisphereLongitude) {

		this.hemisphereLongitude = hemisphereLongitude;
	}

	public void setHemisphereLatitude(HemisphereLatitudeType hemisphereLatitude) {

		this.hemisphereLatitude = hemisphereLatitude;
	}

	public void setLongitude(Long longitude) {

		this.longitude = Asn1BigInteger.toAsn1(longitude);
	}

	public void setLatitude(Long latitude) {

		this.latitude = Asn1BigInteger.toAsn1(latitude);
	}

	public void setAccuracy(GeoUnitType accuracy) {

		this.accuracy = accuracy;
	}


}
